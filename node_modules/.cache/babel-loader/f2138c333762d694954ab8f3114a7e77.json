{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _regeneratorRuntime = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nvar modeToString = require('./mode-to-string');\n\nvar _require = require('ipfs-utils/src/globalthis'),\n    File = _require.File,\n    FormData = _require.FormData;\n\nfunction multipartRequest() {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var source,\n        abortController,\n        headers,\n        parts,\n        formData,\n        index,\n        total,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        _value2,\n        content,\n        path,\n        mode,\n        mtime,\n        fileSuffix,\n        type,\n        fieldName,\n        qs,\n        secs,\n        nsecs,\n        end,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            source = _args.length > 0 && _args[0] !== undefined ? _args[0] : '';\n            abortController = _args.length > 1 ? _args[1] : undefined;\n            headers = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            parts = [];\n            formData = new FormData();\n            index = 0;\n            total = 0;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 9;\n            _iterator = _asyncIterator(normaliseInput(source));\n\n          case 11:\n            _context.next = 13;\n            return _iterator.next();\n\n          case 13:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 17;\n            return _step.value;\n\n          case 17:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 33;\n              break;\n            }\n\n            _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n            fileSuffix = '';\n            type = content ? 'file' : 'dir';\n\n            if (index > 0) {\n              fileSuffix = \"-\".concat(index);\n            }\n\n            fieldName = type + fileSuffix;\n            qs = [];\n\n            if (mode !== null && mode !== undefined) {\n              qs.push(\"mode=\".concat(modeToString(mode)));\n            }\n\n            if (mtime != null) {\n              secs = mtime.secs, nsecs = mtime.nsecs;\n              qs.push(\"mtime=\".concat(secs));\n\n              if (nsecs != null) {\n                qs.push(\"mtime-nsecs=\".concat(nsecs));\n              }\n            }\n\n            if (qs.length) {\n              fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n            }\n\n            if (content) {\n              formData.set(fieldName, content, encodeURIComponent(path));\n              end = total + content.size;\n              parts.push({\n                name: path,\n                start: total,\n                end: end\n              });\n              total = end;\n            } else {\n              formData.set(fieldName, new File([''], encodeURIComponent(path), {\n                type: 'application/x-directory'\n              }));\n            }\n\n            index++;\n\n          case 30:\n            _iteratorNormalCompletion = true;\n            _context.next = 11;\n            break;\n\n          case 33:\n            _context.next = 39;\n            break;\n\n          case 35:\n            _context.prev = 35;\n            _context.t0 = _context[\"catch\"](9);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 39:\n            _context.prev = 39;\n            _context.prev = 40;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 44;\n              break;\n            }\n\n            _context.next = 44;\n            return _iterator.return();\n\n          case 44:\n            _context.prev = 44;\n\n            if (!_didIteratorError) {\n              _context.next = 47;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 47:\n            return _context.finish(44);\n\n          case 48:\n            return _context.finish(39);\n\n          case 49:\n            return _context.abrupt(\"return\", {\n              total: total,\n              parts: parts,\n              headers: headers,\n              body: formData\n            });\n\n          case 50:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 35, 39, 49], [40,, 44, 48]]);\n  }));\n  return _multipartRequest.apply(this, arguments);\n}\n\nmodule.exports = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}