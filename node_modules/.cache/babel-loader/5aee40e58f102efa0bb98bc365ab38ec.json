{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/ciberexplosion/Desktop/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar errCode = require('err-code');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar map = require('it-map');\n\nvar _require = require('./utils'),\n    isBytes = _require.isBytes,\n    isBlob = _require.isBlob,\n    isReadableStream = _require.isReadableStream,\n    isFileObject = _require.isFileObject,\n    mtimeToObject = _require.mtimeToObject,\n    modeToNumber = _require.modeToNumber; // eslint-disable-next-line complexity\n\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {Source} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {AsyncIterable<Entry<Content>>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _normaliseInput = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(input, normaliseContent) {\n    var peekable, _ref, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toFileObject(input, normaliseContent);\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(isBytes(input) || isBlob(input))) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toFileObject(input, normaliseContent);\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            // Browser ReadableStream\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            } // Iterable<?>\n\n\n            if (!(input[Symbol.iterator] || input[Symbol.asyncIterator])) {\n              _context.next = 32;\n              break;\n            }\n\n            /** @type {any} peekable */\n            peekable = itPeekable(input);\n            /** @type {any} value **/\n\n            _context.next = 15;\n            return _awaitAsyncGenerator(peekable.peek());\n\n          case 15:\n            _ref = _context.sent;\n            value = _ref.value;\n            done = _ref.done;\n\n            if (!done) {\n              _context.next = 21;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator), \"t0\", 20);\n\n          case 20:\n            return _context.abrupt(\"return\");\n\n          case 21:\n            peekable.push(value); // (Async)Iterable<Number>\n            // (Async)Iterable<Bytes>\n\n            if (!(Number.isInteger(value) || isBytes(value))) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 25;\n            return toFileObject(peekable, normaliseContent);\n\n          case 25:\n            return _context.abrupt(\"return\");\n\n          case 26:\n            if (!(isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 29;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t1\", 28);\n\n          case 28:\n            return _context.abrupt(\"return\");\n\n          case 29:\n            if (!(value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value))) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t2\", 31);\n\n          case 31:\n            return _context.abrupt(\"return\");\n\n          case 32:\n            if (!isFileObject(input)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 35;\n            return toFileObject(input, normaliseContent);\n\n          case 35:\n            return _context.abrupt(\"return\");\n\n          case 36:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function normaliseInput(_x, _x2) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {ToFile} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {Promise<Entry<Content>>}\n */\n\n\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\n/**\n * @typedef {import('../format-mtime').MTime} MTime\n * @typedef {import('../format-mode').Mode} Mode\n * @typedef {Object} Directory\n * @property {string} path\n * @property {Mode} [mode]\n * @property {MTime} [mtime]\n * @property {undefined} [content]\n *\n * @typedef {Object} FileInput\n * @property {string} [path]\n * @property {ToContent} [content]\n * @property {number | string} [mode]\n * @property {UnixTime} [mtime]\n *\n * @typedef {Date | MTime | HRTime} UnixTime\n *\n * Time representation as tuple of two integers, as per the output of\n * [`process.hrtime()`](https://nodejs.org/dist/latest/docs/api/process.html#process_process_hrtime_time).\n * @typedef {[number, number]} HRTime\n *\n * @typedef {string|InstanceType<typeof window.String>|ArrayBufferView|ArrayBuffer|Blob|Iterable<Uint8Array> | AsyncIterable<Uint8Array> | ReadableStream<Uint8Array>} ToContent\n * @typedef {ToContent|FileInput} ToFile\n * @typedef {Iterable<ToFile> | AsyncIterable<ToFile> | ReadableStream<ToFile>} Source\n */\n\n/**\n * @template {AsyncIterable<Uint8Array>|Blob} Content\n * @typedef {Object} File\n * @property {string} path\n * @property {Mode} [mode]\n * @property {MTime} [mtime]\n * @property {Content} [content]\n */\n\n/**\n * @template {AsyncIterable<Uint8Array>|Blob} Content\n * @typedef {File<Content>|Directory} Entry\n */\n\n\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(input, normaliseContent) {\n    var path, mode, mtime, content, file;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // @ts-ignore - Those properties don't exist on most input types\n            path = input.path, mode = input.mode, mtime = input.mtime, content = input.content;\n            file = {\n              path: path || '',\n              mode: modeToNumber(mode),\n              mtime: mtimeToObject(mtime)\n            };\n\n            if (!content) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return normaliseContent(content);\n\n          case 5:\n            file.content = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 8:\n            if (path) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return normaliseContent(input);\n\n          case 11:\n            file.content = _context2.sent;\n\n          case 12:\n            return _context2.abrupt(\"return\", file);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _toFileObject.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}