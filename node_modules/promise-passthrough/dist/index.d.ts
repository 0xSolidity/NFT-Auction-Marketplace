import { Promise } from 'es6-promise';
/**
 * PassThrough takes a function "fn" as an argument and returns
 * a thunk that takes an argument "a".
 *
 * When the thunk is invoked, it calls the fn() but doesn't wait for it
 * to run/return, instead it returns the given argument "a".
 *
 * Works pretty well in monadic chains, such as promises,
 * when you need to chain a function that creates a side effect!
 */
export declare const passThrough: <T>(fn: (a: T) => void) => (arg: T) => T;
/**
 * Same as PassThrough, except it waits for fn() to resolve!
 */
export declare const passThroughAwait: <T>(fn: (a: T) => void) => (arg: T) => Promise<T>;
